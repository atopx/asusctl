//! # DBus interface proxy for: `org.asuslinux.Daemon`
//!
//! This code was generated by `zbus-xmlgen` `1.0.0` from DBus introspection data.
//! Source: `Interface '/org/asuslinux/Charge' from service 'org.asuslinux.Daemon' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://zeenix.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus_macros::dbus_proxy;

#[dbus_proxy(
    interface = "org.asuslinux.Daemon",
    default_path = "/org/asuslinux/Power"
)]
trait Power {
    /// charge_control_end_threshold method
    fn charge_control_end_threshold(&self) -> zbus::Result<u8>;

    /// MainsOnline method
    fn mains_online(&self) -> zbus::Result<bool>;

    /// set_charge_control_end_threshold method
    fn set_charge_control_end_threshold(&self, limit: u8) -> zbus::Result<()>;

    /// NotifyCharge signal
    #[dbus_proxy(signal)]
    fn notify_charge_control_end_threshold(&self, limit: u8) -> zbus::Result<u8>;

    /// NotifyMainsOnline signal
    #[dbus_proxy(signal)]
    fn notify_mains_online(&self, on: bool) -> zbus::Result<()>;
}
