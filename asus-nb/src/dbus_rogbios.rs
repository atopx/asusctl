// This code was autogenerated with `dbus-codegen-rust -s -d org.asuslinux.Daemon -f org.asuslinux.Daemon -c blocking -p /org/asuslinux/RogBios -m None -o asus-nb/src/dbus_rogbios.rs`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgAsuslinuxDaemon {
    fn set_dedicated_graphic_mode(&self, dedicated: bool) -> Result<(), dbus::Error>;
    fn dedicated_graphic_mode(&self) -> Result<i16, dbus::Error>;
    fn set_post_boot_sound(&self, on: bool) -> Result<(), dbus::Error>;
    fn post_boot_sound(&self) -> Result<i16, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgAsuslinuxDaemon
    for blocking::Proxy<'a, C>
{
    fn set_dedicated_graphic_mode(&self, dedicated: bool) -> Result<(), dbus::Error> {
        self.method_call(
            "org.asuslinux.Daemon",
            "SetDedicatedGraphicMode",
            (dedicated,),
        )
    }

    fn dedicated_graphic_mode(&self) -> Result<i16, dbus::Error> {
        self.method_call("org.asuslinux.Daemon", "DedicatedGraphicMode", ())
            .and_then(|r: (i16,)| Ok(r.0))
    }

    fn set_post_boot_sound(&self, on: bool) -> Result<(), dbus::Error> {
        self.method_call("org.asuslinux.Daemon", "SetPostBootSound", (on,))
    }

    fn post_boot_sound(&self) -> Result<i16, dbus::Error> {
        self.method_call("org.asuslinux.Daemon", "PostBootSound", ())
            .and_then(|r: (i16,)| Ok(r.0))
    }
}

#[derive(Debug)]
pub struct OrgAsuslinuxDaemonNotifyDedicatedGraphicMode {
    pub dedicated: bool,
}

impl arg::AppendAll for OrgAsuslinuxDaemonNotifyDedicatedGraphicMode {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.dedicated, i);
    }
}

impl arg::ReadAll for OrgAsuslinuxDaemonNotifyDedicatedGraphicMode {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgAsuslinuxDaemonNotifyDedicatedGraphicMode {
            dedicated: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgAsuslinuxDaemonNotifyDedicatedGraphicMode {
    const NAME: &'static str = "NotifyDedicatedGraphicMode";
    const INTERFACE: &'static str = "org.asuslinux.Daemon";
}

#[derive(Debug)]
pub struct OrgAsuslinuxDaemonNotifyPostBootSound {
    pub dedicated: bool,
}

impl arg::AppendAll for OrgAsuslinuxDaemonNotifyPostBootSound {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.dedicated, i);
    }
}

impl arg::ReadAll for OrgAsuslinuxDaemonNotifyPostBootSound {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgAsuslinuxDaemonNotifyPostBootSound {
            dedicated: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgAsuslinuxDaemonNotifyPostBootSound {
    const NAME: &'static str = "NotifyPostBootSound";
    const INTERFACE: &'static str = "org.asuslinux.Daemon";
}
